{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport API from '../API';\nexport const useMovieFetch = movieId => {\n  _s();\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchMovie = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(false);\n      const movie = await API.fetchMovie(movieId);\n      const credits = await API.fetchCredits(movieId);\n      // Get directors only\n      const directors = credits.crew.filter(member => member.job === 'Director');\n      setState({\n        ...movie,\n        actors: credits.cast,\n        directors\n      });\n      setLoading(false);\n    } catch (error) {\n      setError(true);\n    }\n  }, [movieId]);\n  useEffect(() => {\n    fetchMovie();\n  }, [movieId, fetchMovie]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n_s(useMovieFetch, \"0CcgZTJDxKpR7Qo4dS4M7aDfuBQ=\");","map":{"version":3,"names":["useState","useEffect","useCallback","API","useMovieFetch","movieId","_s","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast"],"sources":["/Users/mohammadravoof/Documents/GitHub/react-rmdb-v3-starter-files/react-rmdb/src/hooks/useMovieFetch.js"],"sourcesContent":["import { useState, useEffect, useCallback  } from 'react';\nimport API from '../API';\n\nexport const useMovieFetch = movieId => {\n    const [state, setState] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n   \n        const fetchMovie = useCallback(async () => {\n            try{\n                setLoading(true);\n                setError(false);\n\n                const movie = await API.fetchMovie(movieId);\n                const credits = await API.fetchCredits(movieId);\n                // Get directors only\n                const directors = credits.crew.filter(\n                    member => member.job === 'Director'\n                );\n\n                setState({\n                    ...movie,\n                    actors: credits.cast,\n                    directors\n                })\n\n                setLoading(false);\n\n            } catch (error) {\n                setError(true);\n            }\n        }, [movieId]);\n            useEffect (() => {\n\n            fetchMovie();\n        }, [movieId, fetchMovie]);\n\n    return { state, loading, error };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAS,OAAO;AACzD,OAAOC,GAAG,MAAM,QAAQ;AAExB,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;EAAAC,EAAA;EACpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAGrC,MAAMa,UAAU,GAAGX,WAAW,CAAC,YAAY;IACvC,IAAG;MACCQ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,KAAK,CAAC;MAEf,MAAME,KAAK,GAAG,MAAMX,GAAG,CAACU,UAAU,CAACR,OAAO,CAAC;MAC3C,MAAMU,OAAO,GAAG,MAAMZ,GAAG,CAACa,YAAY,CAACX,OAAO,CAAC;MAC/C;MACA,MAAMY,SAAS,GAAGF,OAAO,CAACG,IAAI,CAACC,MAAM,CACjCC,MAAM,IAAIA,MAAM,CAACC,GAAG,KAAK,UAC7B,CAAC;MAEDb,QAAQ,CAAC;QACL,GAAGM,KAAK;QACRQ,MAAM,EAAEP,OAAO,CAACQ,IAAI;QACpBN;MACJ,CAAC,CAAC;MAEFP,UAAU,CAAC,KAAK,CAAC;IAErB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,QAAQ,CAAC,IAAI,CAAC;IAClB;EACJ,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC;EACTJ,SAAS,CAAE,MAAM;IAEjBY,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACR,OAAO,EAAEQ,UAAU,CAAC,CAAC;EAE7B,OAAO;IAAEN,KAAK;IAAEE,OAAO;IAAEE;EAAM,CAAC;AACpC,CAAC;AAACL,EAAA,CApCWF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}